#!/usr/bin/env bash

set -e

source "$(dirname "$0")/../bin/common.sh"

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

sudo -v

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]; then
    log_info "Setting up gitconfig"

    log_user " - What is your GitHub author name?"
    read -e git_authorname
    log_user " - What is your GitHub author email?"
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" \
        -e "s/AUTHOREMAIL/$git_authoremail/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    log_success "Gitconfig setup completed"
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true
      else
        log_warning "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o ) overwrite=true ;;
          O ) overwrite_all=true ;;
          b ) backup=true ;;
          B ) backup_all=true ;;
          s ) skip=true ;;
          S ) skip_all=true ;;
          * ) ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      log_success "Removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      log_success "Moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      log_success "Skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    ln -s "$src" "$dst"
    log_success "Linked $src to $dst"
  fi
}

install_dotfiles () {
  log_info "Installing dotfiles"

  mkdir -p $DOTFILES_ROOT/tmp
  touch $DOTFILES_ROOT/tmp/aptfile
  touch $DOTFILES_ROOT/tmp/brewfile

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
  log_info "Change shell to zsh -- chsh -s $(which zsh)"
}

linux_prep () {
  if ! command_exists docker; then
    log_info "Installing Docker"
    sudo apt update
    sudo apt-get install -y ca-certificates curl gnupg flatpak build-essential libssl-dev libreadline-dev zlib1g-dev libyaml
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    sudo usermod -aG docker ${USER}
  fi

  if ! command_exists kubectl; then
    log_info "Installing kubectl 1.28"
    sudo apt update
    sudo apt install -y apt-transport-https ca-certificates curl
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo apt update
    sudo apt install -y kubectl
  fi
  
  if ! command_exists az; then
    log_info "Installing Azure CLI"
    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  fi

  if ! command_exists zsh; then
    log_info "Installing zsh"
    sudo apt update
    sudo apt install -y zsh
  fi
}

mac_prep () {
  if ! command_exists brew; then
    log_info "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
  brew install zsh
}

case "$OSTYPE" in
  darwin*)  mac_prep ;; 
  linux*)   linux_prep ;;
  bsd*)     log_info "BSD" ;;
  msys*)    log_info "WINDOWS" ;;
  cygwin*)  log_info "ALSO WINDOWS" ;;
  *)        log_info "unknown: $OSTYPE" ;;
esac

setup_gitconfig
install_dotfiles

log_success "All installed!"
