#!/usr/bin/env bash

set -e

source "$(dirname "$0")/../bin/common.sh"

# Function to run installers
run_installers() {
    log_info "Running all dotfiles installers..."
    find . -name install.sh -exec sh -c '{}' \;
}

# Function to install Homebrew if not installed
install_homebrew() {
    if ! command -v brew &> /dev/null; then
        log_warning "Homebrew not found. Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi
}

# Function to update and upgrade Homebrew packages
update_homebrew() {
    log_info "Updating Homebrew packages..."
    brew update
    brew upgrade
    brew cleanup
    brew bundle --file=./macos/brewfile
    brew bundle dump --all --force --file=./tmp/brewfile
}

# Function for macOS setup
mac_setup() {
    log_info "Setting up macOS..."
    install_homebrew
    update_homebrew
    run_installers
}

# Function to install APT packages
install_apt_packages() {
    log_info "Updating APT packages..."
    {
        sudo apt update > /dev/null 2>&1
        sudo apt install -y $(cat ./linux/"$APT_FILE") > /dev/null 2>&1
    } || {
        log_warning "There was an error during apt install. Continuing..."
    }
    
    {
        sudo apt upgrade -y > /dev/null 2>&1
    } || {
        log_warning "There was an error during apt upgrade. Continuing..."
    }
    
    sudo apt autoremove -y > /dev/null 2>&1
    sudo apt autoclean -y > /dev/null 2>&1
}


# Function to check for unsaved APT packages
check_unsaved_apt_packages() {
    mkdir -p ./tmp
    touch ./tmp/"$APT_FILE"
    apt-mark showmanual | sort -u > ./tmp/"$APT_FILE"
    local apt_diff
    set +e
    apt_diff=$(comm -23 ./tmp/"$APT_FILE" ./linux/"$APT_FILE")
    set -e
    if [ -n "$apt_diff" ]; then
        log_warning "Unsaved packages: (tmp/"$APT_FILE"->linux/"$APT_FILE") \n$apt_diff"
    else
        log_success "All packages are up to date."
    fi
}

# Function for Linux setup
linux_setup() {
    log_info "Setting up Linux..."
    install_apt_packages
    check_unsaved_apt_packages
    run_installers
}

flatpak_setup() {
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
}


# Main script execution
main() {
    cd "$(dirname "$0")"/..


    detect_os

    log_info "OS is $OS"

    case "$OS" in
        macOS)
            mac_setup
            ;;
        Ubuntu)
            APT_FILE="ubuntu_apt"
            linux_setup
            flatpak_setup
            ;;
        WSL)
            APT_FILE="wsl_apt"
            linux_setup
            ;;
        *)
            log_warning "Unsupported operating system."
            exit 1
            ;;
    esac

    log_success "Setup completed successfully."
}

main "$@"
