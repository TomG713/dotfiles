#!/bin/bash

LOGFILE="/var/log/external_monitor_wake.log"
MONITOR="DP-4-1-5"
BUILT_IN_MONITOR="eDP-1"
NVIDIA_SETTINGS="CurrentMetaMode=\"$MONITOR: nvidia-auto-select +1920+0 { ForceCompositionPipeline = On }\""
DEBUG=true
DISPLAY=:1

log() {
    echo "$(date) - $1" >> $LOGFILE
}

execute() {
    log "$1"
    if $DEBUG; then
        eval "$2" >> $LOGFILE 2>&1
        if [ $? -eq 0 ]; then
            log "$3"
        else
            log "$4"
        fi
    else
        eval "$2" >> /dev/null 2>&1
    fi
}

reset_gpu() {
    execute "Enabling NVIDIA persistence mode..." "sudo nvidia-smi -pm 1" "Persistence mode enabled successfully." "Failed to enable persistence mode."
    sleep 2
    if ! sudo nvidia-smi --gpu-reset 2>&1 | grep -q "In use by another client"; then
        execute "Resetting NVIDIA GPU..." "sudo nvidia-smi --gpu-reset" "GPU reset successfully." "Failed to reset GPU. GPU might be in use by another process."
    else
        log "GPU reset skipped because it's in use by another process."
    fi
}

reset_display() {
    execute "Resetting display configuration..." "xrandr --auto" "Display configuration reset successfully." "Failed to reset display configuration."
    if $DEBUG; then
        execute "xrandr output:" "xrandr" "" ""
    fi
    sleep 2
}

# Temporarily comment out force_nvidia_composition_pipeline
# force_nvidia_composition_pipeline() {
#     execute "Forcing full composition pipeline for NVIDIA..." "sudo DISPLAY=$DISPLAY nvidia-settings --assign $NVIDIA_SETTINGS" "Full composition pipeline forced successfully." "Failed to force full composition pipeline."
#     sleep 2
# }

# reauthorize_thunderbolt() {
#     for device in /sys/bus/thunderbolt/devices/*; do
#         if [ -d "$device" ] && [ -w "$device/authorized" ]; then
#             execute "Reauthorizing Thunderbolt device at $device..." "echo 1 | sudo tee $device/authorized" "Thunderbolt device reauthorized successfully at $device." "Failed to reauthorize Thunderbolt device at $device."
#         fi
#     done
#     sleep 2
# }

reset_thunderbolt_controller() {
    execute "Resetting Thunderbolt controller..." "echo 1 | sudo tee /sys/bus/pci/devices/0000:05:00.0/reset" "Thunderbolt controller reset successfully." "Failed to reset Thunderbolt controller."
    sleep 2
}

enable_monitor() {
    for i in {1..3}; do
        log "Attempt $i: Enabling $MONITOR..."
        execute "" "xrandr --output $MONITOR --auto --right-of $BUILT_IN_MONITOR --primary" "" ""
        if xrandr | grep -q "$MONITOR connected"; then
            log "External monitor detected and enabled."
            sleep 3 
            execute "" "xrandr --output $MONITOR --auto --right-of $BUILT_IN_MONITOR --primary" "" ""
            break
        else
            log "External monitor not detected."
        fi
        sleep 2
    done

    if $DEBUG; then
        execute "Final xrandr output:" "xrandr" "" ""
    fi
}

wake_monitor() {
    log "Waking up external monitor..."
    # Temporarily comment out the force_nvidia_composition_pipeline
    # force_nvidia_composition_pipeline
    # reauthorize_thunderbolt
    reset_thunderbolt_controller
    enable_monitor
}

gather_logs() {
    log "Gathering additional logs for troubleshooting..."
    execute "dmesg log:" "sudo dmesg | tail -n 50" "" ""
    execute "journalctl log:" "journalctl -xe | tail -n 50" "" ""
    execute "nvidia-smi log:" "sudo nvidia-smi -q" "" ""
}

log "------------------------------------------------------------"

case "$1" in
    suspend | hibernate | pre)
        log "System is going to $1"
        ;;
    resume | thaw | post)
        log "System is waking up from $1"
        reset_gpu
        reset_display
        wake_monitor
        gather_logs
        ;;
    manual)
        log "Manual execution requested"
        reset_gpu
        reset_display
        wake_monitor
        gather_logs
        ;;
    *)
        echo "Usage: $0 {suspend|hibernate|pre|resume|thaw|post|manual}"
        exit 1
        ;;
esac

exit 0
